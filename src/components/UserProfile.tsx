import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';
import { UserStats, Word } from '@/types/vocabulary';

interface UserProfileProps {
  words: Word[];
  userStats: UserStats;
  saveStats: (stats: UserStats) => void;
  onBack: () => void;
}

export const UserProfile = ({ words, userStats, saveStats }: UserProfileProps) => {
  const [userName, setUserName] = useState(localStorage.getItem('userName') || '–ò–∑—É—á–∞—é—â–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π');
  const [isEditing, setIsEditing] = useState(false);
  const [tempName, setTempName] = useState(userName);

  const learnedWords = words.filter(w => w.isLearned);
  const totalCorrect = words.reduce((sum, w) => sum + w.correctAnswers, 0);
  const totalIncorrect = words.reduce((sum, w) => sum + w.incorrectAnswers, 0);
  const totalAttempts = totalCorrect + totalIncorrect;
  const accuracy = totalAttempts > 0 ? Math.round((totalCorrect / totalAttempts) * 100) : 0;

  const handleSaveName = () => {
    if (tempName.trim()) {
      setUserName(tempName.trim());
      localStorage.setItem('userName', tempName.trim());
      setIsEditing(false);
    }
  };

  const handleCancelEdit = () => {
    setTempName(userName);
    setIsEditing(false);
  };

  const resetProgress = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      localStorage.removeItem('vocabulary-words');
      localStorage.removeItem('vocabulary-stats');
      window.location.reload();
    }
  };

  const getAchievements = () => {
    const achievements = [];

    if (learnedWords.length >= 1) {
      achievements.push({ icon: 'üåü', title: '–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ', description: '–í—ã—É—á–∏–ª –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ' });
    }
    if (learnedWords.length >= 10) {
      achievements.push({ icon: 'üèÜ', title: '–î–µ—Å—è—Ç–∫–∞', description: '–í—ã—É—á–∏–ª 10 —Å–ª–æ–≤' });
    }
    if (learnedWords.length >= 50) {
      achievements.push({ icon: 'üéñÔ∏è', title: '–ü–æ–ª—Å–æ—Ç–Ω–∏', description: '–í—ã—É—á–∏–ª 50 —Å–ª–æ–≤' });
    }
    if (learnedWords.length >= 100) {
      achievements.push({ icon: 'ü•á', title: '–°–æ—Ç–Ω—è', description: '–í—ã—É—á–∏–ª 100 —Å–ª–æ–≤' });
    }
    if (accuracy >= 80 && totalAttempts >= 20) {
      achievements.push({ icon: 'üéØ', title: '–°–Ω–∞–π–ø–µ—Ä', description: '–¢–æ—á–Ω–æ—Å—Ç—å 80%+' });
    }
    if (userStats.streakDays >= 7) {
      achievements.push({ icon: 'üî•', title: '–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥', description: '7 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥' });
    }
    if (userStats.streakDays >= 30) {
      achievements.push({ icon: 'üí™', title: '–ú–µ—Å—è—Ü –ø–æ–¥—Ä—è–¥', description: '30 –¥–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥' });
    }

    return achievements;
  };

  const achievements = getAchievements();

  return (
    <div className="p-6">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-center mb-2">üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h2>
        <p className="text-center text-gray-600">
          –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </p>
      </div>

      {/* Profile Info */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Icon name="User" size={24} className="mr-2" />
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white text-2xl font-bold">
                {userName.charAt(0).toUpperCase()}
              </div>
              <div>
                {isEditing ? (
                  <div className="flex items-center space-x-2">
                    <Input
                      value={tempName}
                      onChange={(e) => setTempName(e.target.value)}
                      className="w-48"
                      onKeyPress={(e) => e.key === 'Enter' && handleSaveName()}
                    />
                    <Button size="sm" onClick={handleSaveName}>
                      <Icon name="Check" size={16} />
                    </Button>
                    <Button size="sm" variant="outline" onClick={handleCancelEdit}>
                      <Icon name="X" size={16} />
                    </Button>
                  </div>
                ) : (
                  <div className="flex items-center space-x-2">
                    <h3 className="text-xl font-semibold">{userName}</h3>
                    <Button size="sm" variant="outline" onClick={() => setIsEditing(true)}>
                      <Icon name="Edit" size={16} />
                    </Button>
                  </div>
                )}
                <p className="text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–π –∏–∑—É—á–∞—é—â–∏–π</p>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-blue-600">{words.length}</p>
              <p className="text-sm text-gray-600">–í—Å–µ–≥–æ —Å–ª–æ–≤</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-green-600">{learnedWords.length}</p>
              <p className="text-sm text-gray-600">–ò–∑—É—á–µ–Ω–æ</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-purple-600">{accuracy}%</p>
              <p className="text-sm text-gray-600">–¢–æ—á–Ω–æ—Å—Ç—å</p>
            </div>
            <div className="text-center">
              <p className="text-2xl font-bold text-orange-600">{userStats.streakDays}</p>
              <p className="text-sm text-gray-600">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Achievements */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Icon name="Award" size={24} className="mr-2" />
            –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({achievements.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          {achievements.length === 0 ? (
            <div className="text-center py-8">
              <div className="text-4xl mb-4">üèÖ</div>
              <p className="text-gray-500">
                –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ù–∞—á–Ω–∏ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞!
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {achievements.map((achievement, index) => (
                <div key={index} className="flex items-center space-x-4 p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border">
                  <div className="text-3xl">{achievement.icon}</div>
                  <div>
                    <h4 className="font-semibold">{achievement.title}</h4>
                    <p className="text-sm text-gray-600">{achievement.description}</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Settings */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Icon name="Settings" size={24} className="mr-2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div>
                <h4 className="font-medium">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                <p className="text-sm text-gray-600">–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö</p>
              </div>
              <Badge variant="outline">–°–∫–æ—Ä–æ</Badge>
            </div>

            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div>
                <h4 className="font-medium">–¢–µ–º–Ω–∞—è —Ç–µ–º–∞</h4>
                <p className="text-sm text-gray-600">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É</p>
              </div>
              <Badge variant="outline">–°–∫–æ—Ä–æ</Badge>
            </div>

            <div className="flex items-center justify-between p-4 bg-red-50 rounded-lg border border-red-200">
              <div>
                <h4 className="font-medium text-red-700">–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</h4>
                <p className="text-sm text-red-600">–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</p>
              </div>
              <Button 
                variant="outline" 
                onClick={resetProgress}
                className="text-red-600 border-red-300 hover:bg-red-50"
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};